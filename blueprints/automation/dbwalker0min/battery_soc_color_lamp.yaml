blueprint:
  name: Battery SOC → Bulb Color (Red→Green)
  description: >
    Sets a color bulb based on battery state of charge. 0% = red, 100% = green,
    with a smooth gradient in between. Optional brightness scaling and safety floors.
  domain: automation
  input:
    soc_sensor:
      name: Battery SOC sensor (0–100)
      description: A sensor or number entity that reports battery SoC in percent.
      selector:
        entity:
          domain: [sensor, input_number]
    target_light:
      name: Target color bulb
      selector: { target: { entity: { domain: light } } }
    brightness:
      name: Brightness
      description: Brightness of light (0-1).
      default: 0.8
      selector: { number: { min: 0, max: 1, step: 0.05, mode: slider } }
    update_interval_sec:
      name: Update interval (seconds)
      description: In addition to state changes, refresh on this cadence.
      default: 30
      selector: { number: { min: 5, max: 600, step: 5, mode: slider } }

mode: restart

trigger:
  - platform: state
    entity_id: !input soc_sensor
  - platform: time_pattern
    seconds: !input update_interval_sec
  - platform: homeassistant
    event: start

variables:
  soc_device: !input soc_sensor
  b: !input brightness           # 0..1 from the slider
  soc_raw: "{{ states(soc_device) | float(0) }}"
  soc: "{{ [0, [soc_raw, 100] | min] | max }}"
  hue: "{{ (soc * 1.2) | round(0) }}"
  sat: 100
  # Convert 0..1 -> 0..255 and clamp just in case
  brightness_255: "{{ ([0, (b | float * 255) | round(0)] | max, 255) | min }}"

condition: []

action:
  - service: light.turn_on
    target: !input target_light
    data:
      hs_color: ["{{ hue }}", "{{ sat }}"]
      brightness: "{{ brightness }}"
